const express = require("express");
const router = express.Router();
const Order = require("../models/Order");
const fetchuser = require("../middleware/fetchuser");
const { body, validationResult } = require("express-validator");

// POST /api/order - place a new order 
// This endpoint is used to place a new order. It requires the user to be authenticated (using fetchuser middleware) and expects the following fields in the request body: cartItems, paymentMethod, totalAmount, and address.
// The cartItems field should contain an array of items, each with a name, price, quantity, and image (base64 encoded).
router.post("/", fetchuser, async (req, res) => {
  try {
    const { cartItems, paymentMethod, totalAmount, address } = req.body;
    // Validate the request body
    // now user is a field but req.userDataReq.id is a logged-in user ID which we are getting from the JWT  
    const newOrder = new Order({
      user: req.userDataReq.id,
      items: cartItems, 
      paymentMethod,
      totalAmount,
      address, 
      status: "Placed",
    });
    // Save the order to the database
    await newOrder.save();
    // Send a response back to the client
    // The response includes the order ID and a success message.
    // The order ID is generated by MongoDB when the order is saved.
    res.status(201).json({ success: true, order: newOrder });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to place order" });
  }
});

// GET /api/order/history - get order history for logged-in user
router.get("/history", fetchuser, async (req, res) => {
  try {
    // Fetch the order history for the logged-in user
    // The user ID is obtained from the JWT token using the fetchuser middleware.
    const userId = req.userDataReq.id; // comes from JWT
    // Find all orders for the user (The field that are created by us during POST request) and sort them by creation date in descending order
    const orders = await Order.find({ user: userId }).sort({ createdAt: -1 });
    // Send the order history back to the client
    res.json({  orders });
  } catch (error) {
    console.error("Error fetching order history:", error);
    res
      .status(500)
      .json({ success: false, error: "Failed to get order history" });
  }
});

module.exports = router;
